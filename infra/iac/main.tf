# Esse arquivo √© um manifesto de infraestrutura.
# Ele basicamente e responasvel por automatizar a cria√ß√£o de um ambiente Kubernetes local usando Kind (Kubernetes in Docker) e instala servi√ßos essenciais 
# de infraestrutura via Helm charts para monitoramento e CI/CD.

# # This file is an infrastructure manifest.
# It is basically responsible for automating the creation of a local Kubernetes environment using Kind (Kubernetes in Docker) and installing essential infrastructure services
# via Helm charts for monitoring and CI/CD.

# Cria um cluster Kubernetes local usando Kind (Kubernetes in Docker).
# O nome do cluster √© definido usando uma vari√°vel var.prefix seguida de poc-kind-cluster.

# Creates a local Kubernetes cluster using Kind (Kubernetes in Docker).
# The cluster name is defined using a var.prefix variable followed by poc-kind-cluster.
resource "kind_cluster" "default" {
  name = "${var.prefix}poc-kind-cluster"
}

# Namespace infra ‚Üí onde ficar√£o servi√ßos de infraestrutura (monitoramento, CI/CD).

# Infra namespace ‚Üí where infrastructure services (monitoring, CI/CD) will be located.
resource "kubernetes_namespace" "infra" {
  metadata { name = "infra" }
}

# Namespace apps ‚Üí onde rodar√£o as aplica√ß√µes da nossa solu√ß√£o.

# Namespace apps ‚Üí where our solution's applications will run.
resource "kubernetes_namespace" "apps" {
  metadata { name = "apps" }
}

# Instala Prometheus (monitoramento) no namespace infra.

# Install Prometheus (monitoring) in the infra namespace.
resource "helm_release" "prometheus" {
  name       = "prometheus"
  namespace  = kubernetes_namespace.infra.metadata[0].name
  # Usa o reposit√≥rio oficial da comunidade.
  # Use the official community repository.
  repository = "https://prometheus-community.github.io/helm-charts"
  chart      = "prometheus"
  # Vers√£o do chart
  # Chart version
  version    = "27.14.0"
  create_namespace = false
  #Configura wait e timeout para garantir que a instala√ß√£o finalize corretamente antes de continuar.
  #Configure wait and timeout to ensure the installation completes correctly before continuing.
  wait    = true
  timeout = 900
}

# Instala Grafana no namespace infra.

# Install Grafana in the infra namespace.
resource "helm_release" "grafana" {
  name       = "grafana"
  namespace  = kubernetes_namespace.infra.metadata[0].name
  repository = "https://grafana.github.io/helm-charts"
  chart      = "grafana"
  # Vers√£o do chart
  # Chart version
  version    = "9.0.0"
  create_namespace = false
 # Usa configura√ß√µes extras do arquivo grafana-values.yaml
 # Use extra configuration from the grafana-values.yaml file
  values = [
    file("${path.module}/values/grafana-values.yaml")
  ]
  set {
    name  = "service.type"
  # Define o tipo de servi√ßo como ClusterIP (acess√≠vel apenas dentro do cluster).
  # Sets the service type to ClusterIP (accessible only within the cluster).
    value = "ClusterIP"
  }
  wait    = true
  timeout = 900
}

# Instala Jenkins no namespace infra.

# Installs Jenkins in the infra namespace.
resource "helm_release" "jenkins" {
  name       = "jenkins"
  namespace  = kubernetes_namespace.infra.metadata[0].name
  repository = "https://charts.jenkins.io"
  chart      = "jenkins"
  # Vers√£o do chart
  # Chart version
  version    = "5.8.73"
  # significa que o namespace onde os recursos ser√£o criados n√£o ser√° automaticamente criado, e assume que ele j√° existe.


/*
Por que usar create_namespace = false
Evitar conflitos: Se o namespace j√° existir e estiver configurado com quotas, RBAC, network policies etc., voc√™ n√£o quer que o Helm sobrescreva nada.
Organiza√ß√£o: Mant√©m a separa√ß√£o clara entre infraestrutura b√°sica (namespaces, quotas, pol√≠ticas) e aplica√ß√µes (que s√≥ usam os namespaces existentes).
*/
  # means that the namespace where the resources will be created will not be automatically created, and assumes that it already exists.

/*
Why use create_namespace = false
Centralized control: On many teams, namespaces are created manually or via another Terraform module to maintain control over naming, labels, and policies.
Avoid conflicts: If the namespace already exists and is configured with quotas, RBAC, network policies, etc., you don't want Helm to overwrite anything.
Organization: Maintains a clear separation between core infrastructure (namespaces, quotas, policies) and applications (which only use existing namespaces).*/

  create_namespace = false
# Usa configura√ß√µes definidas no arquivo jenkins-values.yaml. 
# Uses settings defined in the jenkins-values.yaml file.
  values = [
    file("${path.module}/jenkins-values.yaml")
  ]
  # depends_on ‚Üí garante que o Jenkins s√≥ ser√° instalado depois que o cluster Kind estiver criado.
  # depends_on ‚Üí ensures that Jenkins will only be installed after the Kind cluster is created.
  depends_on = [kind_cluster.default]
  wait    = true
  timeout = 900
}

/*
Sobre o Open Tofu
O que √© e por que usar?
OpenTofu √© um projeto 100% open source, com a promessa de sempre permanecer aberto.
Ele √© compat√≠vel com Terraform 1.5 (no in√≠cio) e segue trabalhando para ter compatibilidade futura e novas funcionalidades.
A ideia √© que voc√™ possa migrar sem grandes altera√ß√µes no c√≥digo existente.

üöÄ Vantagens de usar o OpenTofu
- Open Source garantido
- Compatibilidade com Terraform
- Independ√™ncia e comunidade forte
  N√£o est√° preso √†s decis√µes de uma empresa privada.
-Evolu√ß√£o mais r√°pida
  Como n√£o depende de interesses comerciais, a comunidade pode priorizar features pedidas pelos usu√°rios.
-Seguro para longo prazo

Desvantagens:
Ado√ß√£o no mercado: Terraform ainda √© mais conhecido

What is it and why use it?
OpenTofu is a 100% open source project,  with a promise to always remain open.
It is compatible with Terraform 1.5 (initially) and continues to work towards future compatibility and new features.
The idea is that you can migrate without major changes to the existing code.

üöÄ Advantages of using OpenTofu
- Guaranteed Open Source
- Compatibility with Terraform
- Independence and a strong community
Not tied to the decisions of a private company.
- Faster evolution
Because it is not dependent on commercial interests, the community can prioritize features requested by users.
- Long-term security

Disadvantages:
Market adoption: Terraform is still better known
*/

/*
---------------------------------------------------------------------------------------------------------------
üìå O que √© o Helm?
Helm √© um gerenciador de pacotes para Kubernetes, parecido com o apt (Linux) ou o npm (Node.js).
Ele usa charts (pacotes Helm) para instalar, atualizar e gerenciar aplica√ß√µes dentro de um cluster Kubernetes.

üöÄ Por que usar o Helm?
Simplifica o deploy de aplica√ß√µes complexas (banco de dados, Jenkins, Prometheus, etc.).
Reduz repeti√ß√£o de YAMLs, centralizando tudo em templates.
Facilita upgrades e rollbacks de vers√µes.
Permite reuso de configura√ß√µes por meio de values.yaml.

‚úÖ Vantagens
Automa√ß√£o: menos comandos manuais com kubectl.
Padroniza√ß√£o: charts reutiliz√°veis evitam copiar e colar YAML.
Versionamento: f√°cil rollback para vers√µes anteriores.
Comunidade forte: existem milhares de charts prontos (ex: nginx, postgres, jenkins).
Integra√ß√£o com CI/CD: √≥timo para pipelines autom√°ticos.

‚ö†Ô∏è Desvantagens
Curva de aprendizado: templates Helm usam Go templates, que podem ser confusos.
Complexidade em customiza√ß√µes: √†s vezes √© mais dif√≠cil do que editar YAML puro.
Depend√™ncia de charts externos: confiar em charts da comunidade pode trazer riscos de seguran√ßa.
Debug dif√≠cil: quando algo d√° errado, o erro nem sempre √© claro.

üìå What is Helm?
Helm is a package manager for Kubernetes, similar to apt (Linux) or npm (Node.js).
It uses charts (Helm packages) to install, update, and manage applications within a Kubernetes cluster.

üöÄ Why use Helm?
It simplifies the deployment of complex applications (databases, Jenkins, Prometheus, etc.).
It reduces YAML repetition by centralizing everything in templates.
It facilitates version upgrades and rollbacks.
It allows configuration reuse through values.yaml.

‚úÖ Advantages
Automation: fewer manual commands with kubectl.
Standardization: reusable charts avoid copying and pasting YAML.
Versioning: easy rollback to previous versions.
Strong community: There are thousands of ready-made charts (e.g., Nginx, Postgres, Jenkins).
Integration with CI/CD: Great for automated pipelines.

‚ö†Ô∏è Disadvantages
Learning curve: Helm templates use Go templates, which can be confusing.
Complex customizations: Sometimes more difficult than editing pure YAML.
Dependency on external charts: Relying on community charts can pose security risks.
Difficult to debug: When something goes wrong, the error isn't always clear.
*/

/*
1. kind

O kind √© uma ferramenta que significa Kubernetes IN Docker.

Ele cria clusters Kubernetes rodando dentro de containers Docker na sua m√°quina local.

Muito usado para testes locais, CI/CD e desenvolvimento, porque √© leve, r√°pido de criar/apagar e n√£o depende de nuvem.
*/
